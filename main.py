import os
import asyncio
import requests
import difflib
import random
from dotenv import load_dotenv
from telegram import Bot

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
HISTORY_FILE = "history.txt"
MAX_HISTORY = 90

def is_similar(new_post, old_post, threshold=0.9):
    return difflib.SequenceMatcher(None, new_post, old_post).ratio() > threshold

def load_history():
    if not os.path.exists(HISTORY_FILE):
        return []
    with open(HISTORY_FILE, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def save_to_history(post):
    history = load_history()
    history.append(post)
    history = history[-MAX_HISTORY:]
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        for p in history:
            f.write(p.replace('\n', ' ') + "\n")

def choose_tone():
    tones = {
        "—à—É—Ç–æ—á–Ω—ã–π": "–ü–∏—à–∏ —Å –ª—ë–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π, –º–µ—Å—Ç–∞–º–∏ —à—É—Ç–æ—á–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –¥—Ä—É–≥—É.",
        "–¥–µ—Ä–∑–∫–∏–π": "–ü–∏—à–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, –ø–æ –¥–µ–ª—É, –Ω–µ —Ü–µ—Ä–µ–º–æ–Ω—è—Å—å. –ö–∞–∫ –±—É–¥—Ç–æ —É —Ç–µ–±—è –æ–ø—ã—Ç, –∞ —á–∏—Ç–∞—Ç–µ–ª—å ‚Äî –ª–µ–Ω–∏–≤—ã–π.",
        "–¥–µ–ª–æ–≤–æ–π": "–ü–∏—à–∏ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç. –ß—ë—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ, –ø–æ —Ñ–∞–∫—Ç–∞–º ‚Äî –±—É–¥—Ç–æ —ç—Ç–æ –±–∏–∑–Ω–µ—Å-–¥–æ–∫–ª–∞–¥."
    }
    name = random.choice(list(tones.keys()))
    return name, tones[name]

def generate_post():
    tone_key, tone_instruction = choose_tone()

    prompt = (
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "1. üìå –ò–¥–µ—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        "2. üí° –°—É—Ç—å ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ\n"
        "3. üõ† –®–∞–≥–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ (3-5 —à–∞–≥–æ–≤)\n"
        "4. üí∞ –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–∞\n"
        "5. üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ä–µ—Å—É—Ä—Å—ã\n"
        "6. üë§ –ü–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–º, —É –∫–æ–≥–æ: (–ø–µ—Ä–µ—á–∏—Å–ª–∏ –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è)\n\n"
        f"{tone_instruction} –ë–µ–∑ –∏–Ω—Ñ–æ—Ü—ã–≥–∞–Ω—â–∏–Ω—ã. –°—Ç–∞—Ä–∞–π—Å—è –±—ã—Ç—å –∂–∏–≤—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º."
    )

    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/a_kak_zarabotat",
        "Content-Type": "application/json"
    }

    for attempt in range(5):
        payload = {
            "model": "openai/gpt-3.5-turbo",
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∏–¥–µ—è–º –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞."},
                {"role": "user", "content": prompt}
            ]
        }

        response = requests.post(url, headers=headers, json=payload)
        data = response.json()

        if "choices" in data:
            post = data["choices"][0]["message"]["content"].strip()
            if all(not is_similar(post, old) for old in load_history()):
                return post
        else:
            print("‚ùå –û—à–∏–±–∫–∞:", data)
            break
    return None

async def post_to_telegram(message):
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    await bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode="HTML")

if __name__ == "__main__":
    post = generate_post()
    if post:
        print("üì§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:\n", post)
        asyncio.run(post_to_telegram(post))
        save_to_history(post)
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç.")
